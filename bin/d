#!/usr/bin/perl

=encoding UTF-8
=cut

# PODNAME: script to show time and month info

=head1 DESCRIPTION

=cut

# common modules
use strict;
use warnings FATAL => 'all';
use utf8;
use open qw(:std :utf8);

use Carp qw(croak);
use Moment qw();
use Term::ANSIColor qw(colored);

# global vars
my $true = 1;
my $false = '';

my %month_names = (
    1 => 'January',
    2 => 'February',
    3 => 'March',
    4 => 'April',
    5 => 'May',
    6 => 'June',
    7 => 'July',
    8 => 'August',
    9 => 'September',
    10 => 'October',
    11 => 'November',
    12 => 'December',
);

my @weekdays = qw(Mo Tu We Th Fr Sa Su);

# subs
sub print_header {
    print join(" ", @weekdays) . "\n";
    return $false;
}

sub print_month {
    my (%opts) = @_;
    my $now = delete $opts{now};
    my $first_date = delete $opts{first_date};
    my $ident = delete $opts{ident};

    my $date_start = $first_date;
    my $date_end = $first_date->get_month_end();

    my @week;

    my $date = $date_start;
    my $additional_text = '';

    while ( $date->cmp($date_end) == -1 ) {
        my $day;

        $day->{number} = $date->get_day();

        $day->{color} = 'blue' if $day->{number} == 1;

        if (
            $now->get_year() == $date->get_year()
            && $now->get_month() == $date->get_month()
            && $now->get_day() == $date->get_day()
        ) {
            $day->{color} = 'red';
        }

        if (($day->{number} == 1)) {
            push @week, '' foreach 1..get_day_number($date)-1;
            $additional_text = ' 'x4 . $month_names{$date->get_month()};
        }

        if (@week == 7) {
            print_week(week => \@week, ident => $ident);
            print $additional_text;
            $additional_text = '';
            print "\n";
            undef @week;
        }

        if (@week == 0 and $day->{number} == 1) {
            print "\n";
        }


        $date = $date->plus( day => 1 );
        push @week, $day;
    }

    print_week(week => \@week, ident => $ident);

    return $false;
}

sub get_day_number {
    my ($d) = @_;

    return 1 if $d->is_monday();
    return 2 if $d->is_tuesday();
    return 3 if $d->is_wednesday();
    return 4 if $d->is_thursday();
    return 5 if $d->is_friday();
    return 6 if $d->is_saturday();
    return 7 if $d->is_sunday();

    croak;
}

sub print_week {
    my (%opts) = @_;
    my @week = @{delete $opts{week}};
    my $ident = delete $opts{ident};

    foreach (@week) {
        if (ref $_) {
            my $text = sprintf("%2d", $_->{number});

            if ($_->{color}) {
                if (-t STDOUT) {
                    print colored($text, $_->{color}) . " ";
                } else {
                    print $text . " ";
                }
            } else {
                print $text . " ";
            }
        } elsif ($ident) {
            print " "x3;
        }
    }

    return $false;
}

sub get_now {
    return gmdate(time);
}

# main
sub main {

    my $now = Moment->now();

    my @tzs = (
        {
            name => 'UTC',
            hour => 0,
            minute => 0,
        },
        {
            name => 'Europe/Moscow',
            hour => 3,
            minute => 0,
            current => $true,
        },
    );

    print "\n";

    my $hour;
    my $minute;

    foreach my $tz (@tzs) {
        print
            " "x4
            . $now->plus( hour => $tz->{hour}, minute => $tz->{minute})->get_dt()
            . " "
            . $tz->{name}
            . ($tz->{current} ? '  <---' : '')
            . "\n"
            ;

        if ($tz->{current}) {
            $hour = $tz->{hour};
            $minute = $tz->{minute};
        }
    }

    $now = $now->plus( hour => $hour, minute => $minute );

    print "\n";

    my $prev_month_first_date = $now->get_month_start()->minus(day => 1)->get_month_start();
    my $cur_month_first_date = $now->get_month_start();
    my $next_month_first_date = $now->get_month_end()->plus(day => 1)->get_month_start();

    print_header();
    print_month( first_date => $prev_month_first_date, now => $now, ident => $true );
    print_month( first_date => $cur_month_first_date, now => $now, ident => $false );
    print_month( first_date => $next_month_first_date, now => $now, ident => $false );
    print "\n\n";

}
main() if not caller;
1;
__END__
